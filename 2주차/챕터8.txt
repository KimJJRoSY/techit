#Cascading Style Sheets

#Css적용
-css파일 연결하기 
<link rel="stylesheet" href="CSS파일 상대경로">

./ == 같은 위치에 있음을 의미함 

#Box -Sizing
:박스에 적용된 사이즈의 기준 정하기  

dic{
    box-sizing: content-box;
}
=>설정 안해도 생김 + 요소 사이즈에 패딩과 테두리 포함 X

dic{
    box-sizing:border-box;
}
=>요소 사이즈에 패딩과 테두리 포함

padding ==>넓이 + a

#유니버셜 셀렉터
*{
    box-sizing: border-box;
}
=> 이렇게 쓰고 적용하면 컨텐츠박스처럼 태딩과 사이즈에 왜곡 되는 일 없음

#css구성
{
    속성: 값;
}

#css 특징
-Universal=> 전체 요소 적용 가능 => 조심히 써야됨 
-특정 태그 전체에 적용 가능 
-여러 종류 태그에 적용 가능 
-특정 클래스에 해당되는 요소에 대해 적용 =>클래스명으로 요소 지정 
-특정 아이디에 해당되는 요소에 대해 적용
-특정 아이디가 명시된 특정 태그에 대해 적용
-부모 요소 애의 특정 자식 요소 

#Css 특성
-폭포수, 상속, 우선순위==> 폭포수가 흘러 가장 아래로 떨어지듯
-자식 요소가 css 규칙을 가지고 있으면 그게 부모 요소의 css 보다 더 큰 우선 순위 갖음 
-우선순위:css 규칙이 충돌할 때 어떤 것을 먼저 적용할지
==> html 요소의 style 속성 이 우선 순위 제일 높음 html_style>id>class>p => 가급적 class 사용하는것 권장 

#Css 박스 
-inline
    -한 줄에 표시
    -<a>,<img>,<span>
    태그로 감싸진 내용만큼만 영역을 차지 
    width와 height로 요소의 크기를 조절할수 없음 
    inline은 좌우 mrgin, pagging만 적용 가능

-block
    -개별 요소마다 줄을 바꿈
    -<h1>,<p>,<div>
    -width와 height로 요소의 크기를 조절
    -내용과 별개로 자신의 영역을 가짐

==>display 속성에 inline, block 있음

*block은 있는데 inline은 없음 ===width, height, margin, padding
why? 인라인은 좌우 마진, 패딩만 적용가능 
인라인 요소의 패딩을 개발자 도구에서 보면 위아래에 영향 주는 것 같아 보이지만 실상 아님

#인라인-블록
-inline과 block의 특징을 모두 포함 
-줄을 바꾸지 않음 
-block처럼 width와 height를 가짐
-상하 margin,padding이 레이아웃에 유효함 

#박스 모델 box model
: block box가 가지는 기본 모델 

margin: 테두리로부터 다른 요소까지의 거리
마진 속성에 값 하나만 쓰면 상화좌우에 전체 해당됨
div{    margin: 상하px, 좌우px};
div{    margin: 상px, 우px, 하px, 좌px;} => 위쪽부터 시계 방향으로 이동
div{    margin-top:상px;, 우px, 하px, 좌px} 

#border: 내용을 둘러싼 테두리 
div{    border: 두께 유형 색상} 

#패딩: 내용으로부터 테두리까지의 거리 
div{    padding:  하px, 좌우px};
div{    padding:상px;, 우px, 하px, 좌px} 

#박스 사이징 box-sizing:박스에 적용된 사이즈의 기준 정하기
보편적으로 border-box로 박스 사이즈 정함 => 요소 사이즈에 패딩과 테두리 포함되니까 

#Css 단위
:스크린 환경에 적합한 단위 ==px,%,rem/em

#px:스크린을 구성하는 작은 점 

#%: 부모 요소를 기준으로 크기를 설정 

#em: 부모 요소의 폰트 크기
rem: 루트 요소의 폰트 크기
=> 폰트 크기에 비례하여 크기 설정  
em ==부모요소 크기 *em
rem == 요소크기*rem==통일된 기준을 만드는데 용이

#vw/vh
각 디바이스별 화면의 너비/높이를 기준으로 배율 설정
100vh ==현재 보이는 화면의 100%를 차지함

#이미지 다루기 
 1. 이미지 태그 사용 <img src="이미 경로" alt="대체 문구">
    + 이미지 단독 사용 X, div로 마크업 후 사용
 2. 블락 요소에 

-이미지 태그는 인라인 성격을 가지고 있음 
img{    max-width:100%;}        => 부모 영역에서 벗어나지 않도록 이미지의 너비 상한선을 100%로 설정 
img{    object-fit: cover;}     => 이미지를 부모 요소의 영역의 크기 만큼 확대/축소하여 채움==원본 비율 해치지 않음 
img{    object-fit: contain;}   => 이미지의 비율을 유지하면서 크기를 변경하여 부모 요소를 채움 
img{    object-fit: fill;}      => 이미지의 비율을 유지하지 않고 부모 요소의 크기에 맞게 변경하여 채움 

#Overflow
 overflow: hidden;      =>부모요소의 전체적으로 벗어나는 값을 무시
 overflow: scroll;      =>요소가 넘칠때 x는가로, y=세로 넣어서 막아줌 
 overflow-y: scroll; 
overflow: auto;         => 자동으로 가로세로 넘칠때 막아줌 

#폰트 꾸미기
hex color => 각각 16진수로 나타내는 조합 =>ex) #008000
font-sixe: 숫자 rem;
font-style:폰트  종류; 
font-weight: bold;              #폰트 굵기 
text-decoration: underline;     #밑줄 넣어줌

#링크 밑줄 없애기 
a{      text-decoration: none;}

a:link{
    color:black;
}               #클릭한 적이 없는 링크

a:visited{
    color:black;
}               #방문했던 링크

#테두리 꾸미기 _박스모델중 테두리
테두리는 별도 선언이 없으면 none값 적용 =>안 보임 
border: 두께 스타일 색상 
border-radius: 20px     #모서리 둥글게 만들기

#배경 이미지 설정 _ 블록 요소의 배경임 
.클래스{
    background-image: url(사진.png/jpg);
}

#반복없이 하나만 쓸때
.클래스{
    background-image: url(사진.png/jpg);
    background-repeat: no-repeat;
    background-size: cover;         #요소의 배경을 모두 덮는 것이 우선
    background-position: center;    #가운데에 위치
}   

#요소 정렬하기 
margin:0 outo;   #가운데 정렬
      상하  좌우   #상하는 0 으로 하고 좌우는 가운데로 맞춘다 

=> 부모 블록요소의 넓이를 기준으로 자동으로 마진 계산

text-align: center;     #인라인 요소를 가운데로 맞춘다 